# Project Memory / 项目记忆

## 重要文档位置

### 训练计划与说明
**文件**: `docs/训练计划.md`
**创建日期**: 2025-10-14
**用途**: 记录所有训练计划、已完成训练、下一步计划
**重要性**: ⭐⭐⭐⭐⭐

**内容包括**:
- 项目技术栈概述
- 数据说明
- 已完成的训练结果（监督学习、对比学习）
- 下一步训练计划（6个计划）
- 已知问题与解决方案
- 训练脚本使用说明
- 模型架构细节
- 性能基准

**更新要求**:
每次完成新的训练或制定新计划时，都应该更新此文档。

---

## 项目结构

```
claude_test/
├── docs/
│   ├── 训练计划.md          ← 训练计划主文档 ⭐
│   ├── IMPROVEMENT_STRATEGIES.md  ← 改进方案详细说明
│   └── 其他文档...
├── models/                   ← 模型实现
│   ├── improved_pepland.py  ← 主模型
│   ├── graphormer.py
│   ├── performer.py
│   └── hierarchical_pool.py
├── pretraining/              ← 预训练相关
│   ├── contrastive.py
│   └── augmentation.py
├── data_loader_real.py       ← 真实数据加载器
├── train_real_supervised.py  ← 监督学习训练脚本
├── train_real_contrastive.py ← 对比学习训练脚本
└── test_results/             ← 保存的模型
    ├── best_model_real.pt    ← 监督学习最佳模型 ✓
    └── *.pt                  ← 其他模型检查点
```

---

## 训练历史记录

### 2025-10-14

#### 监督学习训练 ✅
- **脚本**: `train_real_supervised.py`
- **设备**: CUDA 2 (物理GPU 2)
- **数据**: 998 真实SMILES样本
- **结果**:
  - 最佳验证损失: 0.8983
  - 测试损失: 0.8936
  - 模型保存: `test_results/best_model_real.pt`
- **状态**: ✅ 成功完成

#### 对比学习预训练 ⚠️
- **脚本**: `train_real_contrastive.py`
- **设备**: CUDA 2 (物理GPU 2)
- **问题**: 第3个epoch后出现NaN损失
- **原因**: 数值不稳定（学习率过大或温度设置问题）
- **状态**: ⚠️ 需要调整超参数重新训练
- **下一步**: 见 `docs/训练计划.md` 中的"计划 1"

---

## 重要决策记录

### 2025-10-14: 使用简化数据加载器

**决策**: 创建独立的 `data_loader_real.py`，避免依赖原始pepland的复杂代码

**原因**:
1. 原始代码有太多依赖（splitters, tokenizer等）
2. 简化版可以直接从SMILES构建图
3. 更容易调试和维护

**影响**:
- ✓ 训练可以快速启动
- ✓ 代码更清晰
- ⚠️ 特征维度从42→38（简化版）
- ⚠️ 失去了原始的fragment信息

**后续**: 如果需要完整特征，可以集成原始data.py的部分功能

---

### 2025-10-14: 创建训练计划文档

**决策**: 在 `docs/训练计划.md` 中集中记录所有训练相关信息

**原因**:
1. 用户明确要求将训练计划写入文档
2. 便于跟踪进度和后续参考
3. 作为项目记忆的一部分

**动作**:
- 创建了详细的训练计划文档
- 记录了已完成的训练结果
- 制定了6个下一步计划
- 记录了已知问题和解决方案

**位置**: `claude_test/docs/训练计划.md`

---

## 待办事项

### 高优先级 🔴
1. **修复对比学习NaN问题**
   - 降低学习率
   - 调整温度参数
   - 增加梯度裁剪
   - 详见：`docs/训练计划.md` → 计划 1

### 中优先级 🟡
2. **使用预训练编码器微调**
   - 前置：完成对比学习预训练
   - 详见：`docs/训练计划.md` → 计划 2

3. **下游任务评估**
   - 分子性质预测
   - 肽段-靶标结合
   - 详见：`docs/训练计划.md` → 计划 4

### 低优先级 🟢
4. **大规模预训练** - 需要更多数据
5. **消融实验** - 验证各模块贡献
6. **超参数优化** - 系统性搜索最优配置

---

## 关键命令

### 查看训练计划
```bash
cat /home/qlyu/AA_peptide/pepland/claude_test/docs/训练计划.md
```

### 运行训练
```bash
# 监督学习
cd /home/qlyu/AA_peptide/pepland/claude_test
CUDA_VISIBLE_DEVICES=2 python train_real_supervised.py

# 对比学习（待修复）
CUDA_VISIBLE_DEVICES=2 python train_real_contrastive.py
```

### 查看已保存模型
```bash
ls -lh /home/qlyu/AA_peptide/pepland/claude_test/test_results/
```

---

## 注意事项

1. **CUDA设备**:
   - 使用 `CUDA_VISIBLE_DEVICES=2` 指定物理GPU 2
   - 在代码中使用 `cuda:0`（因为只可见一个设备）

2. **数据位置**:
   - 真实数据在 `/home/qlyu/AA_peptide/pepland/data/pretrained/`
   - 不要修改原始数据

3. **模型保存**:
   - 所有模型保存在 `test_results/` 目录
   - 命名规范：`{type}_model_real.pt`

4. **文档更新**:
   - 每次训练后更新 `docs/训练计划.md`
   - 记录结果、问题、经验教训

---

**最后更新**: 2025-10-14
**维护者**: Claude Code Assistant
